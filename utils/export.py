"""
Export utilities for PDF and CSV generation
"""
import streamlit as st
import pandas as pd
from fpdf import FPDF
import io
from datetime import date
from typing import Dict, List, Any
import base64
import os

class PDFReportGenerator:
    """Generate PDF reports for students and classes"""

    def __init__(self):
        self.pdf = FPDF()
        self.pdf.add_page()
        self.pdf.set_font("Arial", size=12)

    def create_student_report_card(self, student_data: Dict, marks_data: List[Dict]) -> bytes:
        """Create student report card PDF"""
        self.pdf = FPDF()
        self.pdf.add_page()

        # Title
        self.pdf.set_font("Arial", "B", 16)
        self.pdf.cell(0, 10, "STUDENT REPORT CARD", 0, 1, "C")
        self.pdf.ln(10)

        # Student Information
        self.pdf.set_font("Arial", "B", 12)
        self.pdf.cell(0, 8, "Student Information:", 0, 1)
        self.pdf.set_font("Arial", size=11)

        student_info = [
            f"Name: {student_data.get('student_name', 'N/A')}",
            f"Class: {student_data.get('class', 'N/A')} - {student_data.get('section', 'N/A')}",
            f"Total Subjects: {student_data.get('total_subjects', 0)}",
            f"Report Generated: {date.today().strftime('%Y-%m-%d')}"
        ]

        for info in student_info:
            self.pdf.cell(0, 6, info, 0, 1)

        self.pdf.ln(5)

        # Performance Summary
        self.pdf.set_font("Arial", "B", 12)
        self.pdf.cell(0, 8, "Performance Summary:", 0, 1)
        self.pdf.set_font("Arial", size=11)

        summary_info = [
            f"Total Marks: {student_data.get('total_marks_obtained', 0)} / {student_data.get('total_max_marks', 0)}",
            f"Overall Percentage: {student_data.get('overall_percentage', 0)}%",
            f"Overall Grade: {student_data.get('overall_grade', 'N/A')}",
            f"Status: {student_data.get('pass_fail_status', 'N/A')}"
        ]

        for info in summary_info:
            self.pdf.cell(0, 6, info, 0, 1)

        self.pdf.ln(10)

        # Subject-wise Performance
        self.pdf.set_font("Arial", "B", 12)
        self.pdf.cell(0, 8, "Subject-wise Performance:", 0, 1)

        # Table headers
        self.pdf.set_font("Arial", "B", 10)
        col_widths = [60, 30, 30, 25, 20, 25]
        headers = ["Subject", "Marks", "Max", "Percentage", "Grade", "Type"]

        for i, header in enumerate(headers):
            self.pdf.cell(col_widths[i], 8, header, 1, 0, "C")
        self.pdf.ln()

        # Table data
        self.pdf.set_font("Arial", size=10)
        for subject in student_data.get('subject_details', []):
            row_data = [
                subject.get('subject', '')[:25],  # Truncate long names
                str(subject.get('marks_obtained', 0)),
                str(subject.get('max_marks', 0)),
                f"{subject.get('percentage', 0)}%",
                subject.get('grade', ''),
                subject.get('assessment_type', '')[:10]
            ]

            for i, data in enumerate(row_data):
                self.pdf.cell(col_widths[i], 6, data, 1, 0, "C")
            self.pdf.ln()

        # Footer
        self.pdf.ln(20)
        self.pdf.set_font("Arial", "I", 10)
        self.pdf.cell(0, 6, "Generated by Student Performance Tracker", 0, 1, "C")

        return self.pdf.output(dest='S').encode('latin-1')

    def create_class_summary_pdf(self, class_data: Dict, students_data: List[Dict]) -> bytes:
        """Create class summary PDF"""
        self.pdf = FPDF()
        self.pdf.add_page()

        # Title
        self.pdf.set_font("Arial", "B", 16)
        title = f"CLASS PERFORMANCE SUMMARY - {class_data.get('class_name', '')}"
        if class_data.get('section'):
            title += f" Section {class_data.get('section')}"
        self.pdf.cell(0, 10, title, 0, 1, "C")
        self.pdf.ln(10)

        # Class Statistics
        self.pdf.set_font("Arial", "B", 12)
        self.pdf.cell(0, 8, "Class Statistics:", 0, 1)
        self.pdf.set_font("Arial", size=11)

        stats_info = [
            f"Total Students: {class_data.get('total_students', 0)}",
            f"Students with Marks: {class_data.get('students_with_marks', 0)}",
            f"Class Average: {class_data.get('class_average', 0)}%",
            f"Pass Count: {class_data.get('pass_count', 0)}",
            f"Fail Count: {class_data.get('fail_count', 0)}",
            f"Pass Percentage: {class_data.get('pass_percentage', 0)}%",
            f"Report Generated: {date.today().strftime('%Y-%m-%d')}"
        ]

        for info in stats_info:
            self.pdf.cell(0, 6, info, 0, 1)

        self.pdf.ln(10)

        # Top Performers
        if class_data.get('top_performers'):
            self.pdf.set_font("Arial", "B", 12)
            self.pdf.cell(0, 8, "Top Performers:", 0, 1)

            self.pdf.set_font("Arial", "B", 10)
            col_widths = [15, 50, 30, 30, 25]
            headers = ["Rank", "Student Name", "Percentage", "Grade", "Subjects"]

            for i, header in enumerate(headers):
                self.pdf.cell(col_widths[i], 8, header, 1, 0, "C")
            self.pdf.ln()

            self.pdf.set_font("Arial", size=10)
            for i, student in enumerate(class_data['top_performers'][:10]):  # Top 10
                row_data = [
                    str(i + 1),
                    student.get('name', '')[:20],
                    f"{student.get('percentage', 0)}%",
                    student.get('grade', ''),
                    str(student.get('subjects_count', 0))
                ]

                for j, data in enumerate(row_data):
                    self.pdf.cell(col_widths[j], 6, data, 1, 0, "C")
                self.pdf.ln()

        # Footer
        self.pdf.ln(10)
        self.pdf.set_font("Arial", "I", 10)
        self.pdf.cell(0, 6, "Generated by Student Performance Tracker", 0, 1, "C")

        return self.pdf.output(dest='S').encode('latin-1')

class CSVExporter:
    """Export data to CSV format"""

    @staticmethod
    def create_students_csv(students_data: List[Dict]) -> str:
        """Create CSV file for students data"""
        if not students_data:
            return ""

        df = pd.DataFrame(students_data)
        return df.to_csv(index=False)

    @staticmethod
    def create_marks_csv(marks_data: List[Dict]) -> str:
        """Create CSV file for marks data"""
        if not marks_data:
            return ""

        df = pd.DataFrame(marks_data)
        return df.to_csv(index=False)

    @staticmethod
    def create_class_summary_csv(class_data: Dict, students_data: List[Dict]) -> str:
        """Create CSV file for class summary"""
        if not students_data:
            return ""

        # Prepare summary data
        summary_rows = []

        # Class information
        summary_rows.append({
            'Metric': 'Class',
            'Value': f"{class_data.get('class_name', '')}-{class_data.get('section', '')}"
        })
        summary_rows.append({
            'Metric': 'Total Students',
            'Value': class_data.get('total_students', 0)
        })
        summary_rows.append({
            'Metric': 'Class Average',
            'Value': f"{class_data.get('class_average', 0)}%"
        })
        summary_rows.append({
            'Metric': 'Pass Percentage',
            'Value': f"{class_data.get('pass_percentage', 0)}%"
        })

        # Student details
        for student in students_data:
            summary_rows.append({
                'Student ID': student.get('student_id', ''),
                'Name': student.get('name', ''),
                'Percentage': f"{student.get('percentage', 0)}%",
                'Grade': student.get('grade', ''),
                'Subjects': student.get('subjects_count', 0)
            })

        df = pd.DataFrame(summary_rows)
        return df.to_csv(index=False)

def create_download_link(data: bytes, filename: str, file_type: str) -> str:
    """Create download link for file"""
    if file_type.lower() == 'pdf':
        mime_type = "application/pdf"
    elif file_type.lower() == 'csv':
        mime_type = "text/csv"
    else:
        mime_type = "application/octet-stream"

    b64_data = base64.b64encode(data).decode()
    return f'<a href="data:{mime_type};base64,{b64_data}" download="{filename}">Download {filename}</a>'

def export_student_report_card(student_data: Dict, marks_data: List[Dict]) -> None:
    """Export student report card as PDF"""
    try:
        pdf_generator = PDFReportGenerator()
        pdf_bytes = pdf_generator.create_student_report_card(student_data, marks_data)

        filename = f"report_card_{student_data.get('student_name', 'student').replace(' ', '_')}_{date.today().strftime('%Y%m%d')}.pdf"

        st.download_button(
            label="ðŸ“„ Download Report Card (PDF)",
            data=pdf_bytes,
            file_name=filename,
            mime="application/pdf",
            use_container_width=True
        )

    except Exception as e:
        st.error(f"Failed to generate PDF: {str(e)}")

def export_class_summary(class_data: Dict, students_data: List[Dict], export_format: str = "csv") -> None:
    """Export class summary in specified format"""
    try:
        if export_format.lower() == "pdf":
            pdf_generator = PDFReportGenerator()
            pdf_bytes = pdf_generator.create_class_summary_pdf(class_data, students_data)

            filename = f"class_summary_{class_data.get('class_name', 'class')}_{date.today().strftime('%Y%m%d')}.pdf"

            st.download_button(
                label="ðŸ“„ Download Class Summary (PDF)",
                data=pdf_bytes,
                file_name=filename,
                mime="application/pdf",
                use_container_width=True
            )

        elif export_format.lower() == "csv":
            csv_exporter = CSVExporter()
            csv_data = csv_exporter.create_class_summary_csv(class_data, students_data)

            if csv_data:
                filename = f"class_summary_{class_data.get('class_name', 'class')}_{date.today().strftime('%Y%m%d')}.csv"

                st.download_button(
                    label="ðŸ“Š Download Class Summary (CSV)",
                    data=csv_data,
                    file_name=filename,
                    mime="text/csv",
                    use_container_width=True
                )
            else:
                st.warning("No data available for export")

    except Exception as e:
        st.error(f"Failed to generate {export_format.upper()}: {str(e)}")

def export_all_data() -> None:
    """Export all system data"""
    with st.expander("ðŸ“¥ Export All Data"):
        col1, col2 = st.columns(2)

        with col1:
            if st.button("Export All Students (CSV)", use_container_width=True):
                # This would need to be implemented with actual data fetching
                st.info("Feature coming soon!")

        with col2:
            if st.button("Export All Marks (CSV)", use_container_width=True):
                # This would need to be implemented with actual data fetching
                st.info("Feature coming soon!")

def save_file_to_reports_folder(data: bytes, filename: str, file_type: str) -> bool:
    """Save file to reports folder"""
    try:
        folder_path = f"reports/{file_type.lower()}_{'reports' if file_type.lower() == 'pdf' else 'exports'}"
        os.makedirs(folder_path, exist_ok=True)

        file_path = os.path.join(folder_path, filename)

        if file_type.lower() == 'pdf':
            with open(file_path, 'wb') as f:
                f.write(data)
        else:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(data.decode('utf-8'))

        return True

    except Exception as e:
        st.error(f"Failed to save file: {str(e)}")
        return False

def display_export_options(data_type: str, data: Any) -> None:
    """Display export options for different data types"""
    with st.expander("ðŸ“¥ Export Options"):
        col1, col2 = st.columns(2)

        with col1:
            if st.button(f"ðŸ“„ Export {data_type} to PDF", use_container_width=True):
                st.info("PDF export initiated...")
                # Implementation would depend on data_type

        with col2:
            if st.button(f"ðŸ“Š Export {data_type} to CSV", use_container_width=True):
                st.info("CSV export initiated...")
                # Implementation would depend on data_type
